#
# WARNING: Do not deploy this tutorial configuration directly to a production environment
#
# The tutorial docker-compose files have not been written for production deployment and will not 
# scale. A proper architecture has been sacrificed to keep the narrative focused on the learning 
# goals, they are just used to deploy everything onto a single Docker machine. All FIWARE components 
# are running at full debug and extra ports have been exposed to allow for direct calls to services. 
# They also contain various obvious security flaws - passwords in plain text, no load balancing,
# no use of HTTPS and so on. 
# 
# This is all to avoid the need of multiple machines, generating certificates, encrypting secrets
# and so on, purely so that a single docker-compose file can be read as an example to build on, 
# not use directly. 
# 
# When deploying to a production environment, please refer to the Helm Repository
# for FIWARE Components in order to scale up to a proper architecture:
# 
# see: https://github.com/FIWARE/helm-charts/
#

services:

  # Orion is the context broker
  orion:
    labels:
      org.fiware: 'tutorial'
    platform: linux/amd64
    image: quay.io/fiware/orion-ld:1.6.0
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - default
    expose:
      - "1026"
    ports:
      - "1026:1026"
    command: -dbhost mongo-db -logLevel DEBUG -forwarding -mongocOnly -wip entityMaps
    healthcheck:
      test: curl --fail -s http://orion:1026/version || exit 1
      interval: 5s

  # @context file is served from here
  ld-context:
    labels:
      org.fiware: 'tutorial'
    image: httpd:alpine
    hostname: context
    container_name: fiware-ld-context
    networks:
      - default
    ports:
        - "3004:80"
    volumes:
        - data-models:/usr/local/apache2/htdocs/
        - type: bind
          source: ${PWD}/conf/mime.types
          target: /usr/local/apache2/conf/mime.types
          read_only: true
    healthcheck:
      test: (wget --server-response --spider --quiet  http://context/user-context.jsonld 2>&1 | awk 'NR==1{print $$2}'|  grep -q -e "200") || exit 1

  # Databases
  mongo-db:
    labels:
      org.fiware: 'tutorial'
    image: mongo:6.0
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "27017"
    ports:
      - "27017:27017" # localhost:27017
    networks:
      - default
    volumes:
      - mongo-db:/data/db
      - mongo-config:/data/configdb
    healthcheck:
      test: ["CMD","mongosh", "localhost:27017/test", "--quiet"]
      interval: 5s

  # IoT-Agent is configured for the JSON Protocol
  iot-agent:
    labels:
      org.fiware: 'tutorial'
    image: quay.io/fiware/iotagent-json:3.4.0-distroless
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db
      - ld-context
    networks:
      - default
    ports:
      - "4041:4041" # localhost:4041
      - "7896:7896" # localhost:7896
    environment:
      - IOTA_NORTH_PORT=4041
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentjson # The name of the database used in mongoDB
      - IOTA_HTTP_PORT=7896 # The port used for device traffic over HTTP
      - IOTA_MQTT_HOST=45407495d235462db83538fb6f91e0ed.s1.eu.hivemq.cloud # The host name of the MQTT Broker
      - IOTA_MQTT_PORT=8883 # The port the MQTT Broker is listening on to receive topics
      - IOTA_MQTT_USERNAME=lego-admin
      - IOTA_MQTT_PASSWORD=FIWARElego123
      - IOTA_MQTT_PROTOCOL=tls
      - IOTA_PROVIDER_URL=http://iot-agent:4041
      - IOTA_CB_NGSI_VERSION=ld # use NGSI-LD when sending updates for active attributes
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=1026 # port the context broker listens on to update context
      - IOTA_JSON_LD_CONTEXT=http://context/user-context.jsonld
      - IOTA_FALLBACK_TENANT=openiot
      - IOTA_MULTI_CORE=true
      - IOTA_DEFAULT_RESOURCE=/iot/json
    healthcheck:
      interval: 30s


  # Quantum Leap is persisting Short Term History to Crate-DB
  quantumleap:
    labels:
      org.fiware: 'tutorial'
    image: orchestracities/quantumleap:1.0.0
    hostname: quantumleap
    container_name: fiware-quantumleap
    depends_on:
      - crate-db
      - redis-db
    networks:
      - default
    ports:
      - "8668:8668"
    environment:
      - CRATE_HOST=crate-db
      - REDIS_HOST=redis-db
      - REDIS_PORT=6379
      - LOGLEVEL=DEBUG
    healthcheck:
      test: curl --fail -s http://quantumleap:8668/version || exit 1

  redis-db:
    labels:
      org.fiware: 'tutorial'
    image: redis:6
    hostname: redis-db
    container_name: db-redis
    ports:
      - "6379:6379" # localhost:6379
    networks:
      - default
    volumes:
      - redis-db:/data
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 10s

  crate-db:
    labels:
      org.fiware: 'tutorial'
    image: crate:4.8.1
    hostname: crate-db
    container_name: db-crate
    networks:
      - default
    ports:
      # Admin UI
      - "4200:4200"
      # Transport protocol
      - "4300:4300"
    command: crate -Cauth.host_based.enabled=false  -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*" -Cdiscovery.type=single-node
    environment:
      - CRATE_HEAP_SIZE=2g # see https://crate.io/docs/crate/howtos/en/latest/deployment/containers/docker.html#troubleshooting
    volumes:
      - crate-db:/data

  # Other services
  grafana:
    labels:
      org.fiware: 'tutorial'
    image: grafana/grafana:8.5.27
    container_name: grafana
    depends_on:
      - crate-db
    networks:
      - default
    ports:
      - "3003:3000"
    environment:
      - GF_INSTALL_PLUGINS=orchestracities-map-panel,grafana-clock-panel,grafana-worldmap-panel
    volumes:
      - grafana:/var/lib/grafana

  soh:
    labels:
      org.fiware: 'tutorial'
    image: docker.io/library/soh:latest
    container_name: soh
    networks:
      - default        

volumes:
  crate-db: ~
  redis-db: ~
  grafana: ~
  mongo-db: ~
  mongo-config: ~
  data-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data-models
      
      
networks:
  default:
